from abc import ABC, abstractmethod
from ..config.registry_config import RegistryConfig
from typing import List, Optional


class ServiceInstance:
    """
    Service instance class
    """
    def __init__(self,
                 service_name: str,
                 host: str,
                 port: int,
                 metadata: dict = None):
        self.service_name = service_name
        self.host = host
        self.port = port
        self.metadata = metadata

    def get_address(self) -> str:
        """
        Get the address of the service instance
        """
        return f'{self.host}:{self.port}'
    

class Registry(ABC):
    """
    Registry interface
    """
    def __init__(self, config: RegistryConfig):
        self.config = config

    @abstractmethod
    def register(self, service_instance: ServiceInstance) -> bool:
        pass

    @abstractmethod
    def unregister(self, service_instance: ServiceInstance) -> bool:
        pass

    @abstractmethod
    def list_instances(self, service_name: str) -> List[ServiceInstance]:
        pass

    @abstractmethod
    def get_instance(self, service_name: str) -> Optional[ServiceInstance]:
        """
        Get the instance of the service and be able to be generated by the load balancer
        """
        pass

    @abstractmethod
    def subscribe(self, service_name: str, callback) -> None:
        pass
    
    @abstractmethod
    def unsubscribe(self, service_name: str) -> None:
        pass
